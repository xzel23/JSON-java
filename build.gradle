plugins {
  id 'com.jfrog.bintray' version "1.8.0"
  id 'com.dua3.gradle.jpms' version "0.3.1"
}

apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'java-library'
apply plugin: 'eclipse'

/////////////////////////////////////////////////////////////////////////////
	group              = 'org.json'
	version            = '20180130-jpms.1'
	
	jar.baseName       = 'json'
	
	ext.moduleName     = project.group 
	ext.scm            = 'https://github.com/xzel23/JSON-java.git'
	ext.repo           = 'public'
	ext.description    = 'A reference implementation of a JSON package in Java. (modularised build)'
	
	ext.developerId    = 'xzel23'
	ext.developerName  = 'Axel Howind'
	ext.developerEmail = 'axel@dua3.com'
/////////////////////////////////////////////////////////////////////////////

repositories {
    jcenter()
    maven { url  "https://dl.bintray.com/dua3/public" }
}

dependencies {
}

sourceCompatibility = 8
targetCompatibility = 8

moduleInfo {
    multiRelease = false
}

// remove module-info.java from eclipse source folder
eclipse.classpath.file.whenMerged {
    for (item in entries.findAll{ it.path.matches('src/[^/]+/java') }) {
    	item.excludes += 'module-info.java'
    }
}

// === BINTRAY === >

bintray {
    user = findProperty('BINTRAY_USER') ?: 'NONE'
    key = findProperty('BINTRAY_KEY') ?: 'NONE'

    configurations = ['archives']

    dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
    publish = false //[Default: false] Whether version should be auto published after an upload    
    override = false //[Default: false] Whether to override version artifacts already published    

    pkg {
        repo = project.repo
        name = project.group
        userOrg = findProperty('BINTRAY_USER_ORG') ?: 'NONE'
        licenses = ['JSON']
        vcsUrl = project.scm

	    version {
	        name = project.version
	        desc = project.name+version
	        released  = new Date()
	        vcsTag = project.version
	    }
    }
}

// === MAVEN publication === >

// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name "JSON"
            url "http://json.org/license.html"
        }
    }
    developers {
        developer {
            id    project.developerId
            name  project.developerName
            email project.developerEmail
        }
    }
    
    scm {
       url project.scm
    }
}

// Create the publication with the pom configuration:
publishing {
    publications {
        UtilityPublication(MavenPublication) {
            from components.java
            groupId project.group
            artifactId project.name
            version version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', project.description)
                root.appendNode('name', project.group)
                root.appendNode('url', project.scm)
                root.children().last() + pomConfig
            }
        }
    }
}

// === ARTIFACTS === >

artifacts {
	archives jar
}

// === DEFAULT TASKS === >

defaultTasks 'build', 'publishToMavenLocal', 'install'
